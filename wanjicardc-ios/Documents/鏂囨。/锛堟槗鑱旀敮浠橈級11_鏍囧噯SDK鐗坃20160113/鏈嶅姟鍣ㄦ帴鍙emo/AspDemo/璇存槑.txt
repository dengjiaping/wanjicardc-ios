───────
 代码文件结构
───────
AspDemo
  ├App_Code---------------------------类文件夹
  │  ├com.merchant.demo---------------商户对接demo目录，商户可参考该目录下的文件进行自己的业务逻辑编写
  │  │  │
  │  │  ├Constants.cs-----------------商户参数配置类文件
  │  │  ├DemoTest.cs------------------商户接入通用接口测试类文件；对接人员参考该文件如何对接口进行调用；
  │  │  ├DemoTestApi.cs---------------【纯API接口版本】商户下单支付接口测试类文件；对接人员参考该文件如何对接口进行调用；
  │  │  ├DemoTestH5.cs----------------【H5页面标准版】商户下单接口测试类文件；对接人员参考该文件如何对接口进行调用；
  │  │  ├DemoTestSdk.cs---------------【SDK标准版】和【纯SDK密码键盘版】商户下单接口测试类文件；对接人员参考该文件如何对接口进行调用；
  │  │  ├DemoTestSmsApi.cs------------【短信+API接口版本】商户下单接口测试类文件；对接人员参考该文件如何对接口进行调用；
  │  │  ├DemoTestSmsH5.cs-------------【短信+H5页面版本】商户下单接口测试类文件；对接人员参考该文件如何对接口进行调用；
  │  │
  │  ├com.payeco.client---------------易联对接接口封装文件目录（已封装）
  │  │  │
  │  │  ├ConstantsClient.cs-----------易联服务器接口调用基础参数定义文件；
  │  │  ├TransactionClient.cs---------易联服务器通用接口调用API封装类，商户需要调用该文件提供的API接口，完成服务器的对接。
  │  │  ├TransactionClientApi.cs------【纯API接口版本】商户下单支付接口调用API封装类，商户需要调用该文件提供的API接口，完成服务器的对接。
  │  │  ├TransactionClientH5.cs-------【H5页面标准版】商户下单接口调用API封装类，商户需要调用该文件提供的API接口，完成服务器的对接。
  │  │  ├TransactionClientSdk.cs------【SDK标准版】和【纯SDK密码键盘版】商户下单接口调用API封装类，商户需要调用该文件提供的API接口，完成服务器的对接。
  │  │  ├TransactionClientSmsApi.cs---【短信+API接口版本】商户下单接口调用API封装类，商户需要调用该文件提供的API接口，完成服务器的对接。
  │  │  └TransactionClientSmsH5.cs----【短信+H5页面版本】商户下单接口调用API封装类，商户需要调用该文件提供的API接口，完成服务器的对接。
  │  │
  │  └com.payeco.tools----------------易联对接接口工具类目录
  │     │
  │     ├Base64.cs--------------------Base64编码处理工具类文件
  │     ├HttpClient.cs----------------http通讯基础类文件
  │     ├LogPrint.cs------------------日志文件打印类文件
  │     ├Signatory.cs-----------------RSA签名和验证签名基础类文件
  │     ├Tools.cs---------------------基础函数类文件
  │     └Xml.cs-----------------------返回报文XML转换的类文件
  │
  ├demoTest.aspx----------------------接口测试结果页面
  ├demoTest.aspx.cs-------------------接口测试调用逻辑文件
  ├index.aspx-------------------------测试主页面，页面包括模拟下单、模拟订单结果通知和接口测试
  ├index.aspx.cs----------------------测试主页面逻辑（空文件）
  ├Notify.aspx------------------------模拟订单结果通知结果页面
  ├Notify.aspx.cs---------------------模拟订单结果通知的逻辑处理
  ├Order.aspx-------------------------模拟下订单（【SDK标准版】和【纯SDK密码键盘版】）的结果页面
  ├Order.aspx.cs----------------------模拟下订单（【SDK标准版】和【纯SDK密码键盘版】）的逻辑处理
  ├OrderH5.aspx-----------------------模拟下订（【H5页面标准版】）单的结果页面
  ├OrderH5.aspx.cs--------------------模拟下订（【H5页面标准版】）单的逻辑处理
  ├ReturnH5.aspx----------------------接收同步通知(【H5页面标准版】)，完成签名验证； 业务逻辑需要商户自行补充
  ├ReturnH5.aspx.cs-------------------接收同步通知(【H5页面标准版】)，完成签名验证； 业务逻辑需要商户自行补充
  ├Web.config-------------------------页面文件目录
  │
  └说明.txt---------------------------使用说明文本


※注意※
◆需要配置的文件是：
--com.merchant.demo.Constants.cs
	MERCHANT_ID ： 							商户编号，由易联产生，邮件发送给商户； 互联网金融行业的商户需要调整为【002020000008】这个商户号；
	MERCHANT_NOTIFY_URL：				商户接收订单通知接口地址
	MERCHANT_RETURN_URL:        商户接收订单通知同步接口地址（在【H5页面标准版】和【短信+H5页面版】使用）
	MERCHANT_RSA_PRIVATE_KEY：	商户RSA私钥，商户自己产生（可采用易联提供RSA工具产生）；格式为base64编码； 互联网金融行业的商户需要调整为互联网金融专用私钥；
	PAYECO_URL：								易联服务器地址；根据调试的环境分别选择【测试环境】和【生产环境】；
	PAYECO_RSA_PUBLIC_KEY：			订单RSA公钥（易联提供）；根据调试的环境分别选择【测试环境】和【生产环境】；


◆接口调用说明：
1、下订单接口（必须调试接口）：
	  【SDK标准版】和【纯SDK密码键盘版】参考【Order.aspx.cs】文件，SDK版本对API接口调用如下：
			String ret = TransactionClientSdk.MerchantOrder(merchantId,
					merchOrderId, amount, orderDesc, tradeTime, expTime,
					notifyUrl, extData, miscData, notifyFlag,
					Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);

	  【H5页面标准版】参考【OrderH5.aspx.cs】文件，H5版本对API接口调用如下：
			String ret = TransactionClientH5.MerchantOrderH5(merchantId,
					merchOrderId, amount, orderDesc, tradeTime, expTime,
          notifyUrl, returnUrl, extData, miscData, notifyFlag, clientIp,
					Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
    【短信+API接口版本】参考【DemoTestSmsApi.cs】文件，对API接口调用如下：
          //发送短信
			    String ret = TransactionClientSmsApi.OrderSendSmCode(merchantId, smId, merchOrderId, tradeTime, mobileNo, verifyTradeCode, smParam,
					    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
				  //下单支付
			    String ret = TransactionClientSmsApi.MerchantOrderPayByAcc(merchantId, industryId, merchOrderId, amount, orderDesc,
					    tradeTime, expTime, notifyUrl, extData, miscData, notifyFlag, smId, smCode,
					    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
    【短信+H5页面版本】参考【DemoTestSmsH5.cs】文件，对API接口调用如下：
          //下单
			    String ret = TransactionClientSmsH5.MerchantOrderSmsH5Pay(merchantId,
					    merchOrderId, amount, orderDesc, tradeTime, expTime,
					    notifyUrl, returnUrl, extData, miscData, notifyFlag,
					    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
					//重新发送短信
			    String ret = TransactionClientSmsH5.OrderSmsSendAgain(merchantId, merchOrderId, tradeTime,
					    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
    【纯API接口版本】参考【DemoTestApi.cs】文件，对API接口调用如下：
				  //下单支付
			    String ret = TransactionClientApi.MerchantOrderPayQuickByAcc(merchantId, industryId, merchOrderId, amount, orderDesc,
					    tradeTime, expTime, notifyUrl, extData, miscData, notifyFlag,
					    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);


2、订单结果通知签名验证接口（必须调试接口）
		参考【Notify.aspx.cs】文件，对API接口调用如下：
			bool b = TransactionClient.bCheckNotifySign(version, merchantId, merchOrderId,
					amount, extData, orderId, status, payTime, settleDate, sign,
					Constants.PAYECO_RSA_PUBLIC_KEY);

3、订单查询、冲正、退款等接口（可选调试接口）：
		参考【DemoTest.cs】文件，对API接口调用如下：
		  //订单查询接口
			String ret = TransactionClient.OrderQuery(merchantId, merchOrderId, tradeTime,
					Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
			//订单冲正接口
			String ret = TransactionClient.OrderReverse(merchantId, merchOrderId, amount, tradeTime,
					Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
      //订单退款申请接口
	    String ret = TransactionClient.OrderRefundReq(merchantId, merchOrderId, merchRefundId, amount, tradeTime,
			    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
      //订单退款结果查询接口
	    String ret = TransactionClient.OrderRefundQuery(merchantId, merchOrderId, merchRefundId, tradeTime,
			    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);
			//互联网金融行业银行卡解除绑定接口
	    String ret = TransactionClient.UnboundBankCard(merchantId, bankAccNo, tradeTime,
			    Constants.MERCHANT_RSA_PRIVATE_KEY, Constants.PAYECO_RSA_PUBLIC_KEY, Constants.PAYECO_URL, retXml);

